# TODO: We can improve this to fully automate the resource creation like Redis
substitutions:
  _RUNTIME: nodejs18
  _SERVICE_NAME: tappz
  _REGION: us-central1
  _ENTRY_POINT: noteApp

steps:
  # Build and push Cloud Run service
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/tappz:$COMMIT_SHA', '.']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/tappz:$COMMIT_SHA']

  # Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'tappz'
      - '--image=gcr.io/$PROJECT_ID/tappz:$COMMIT_SHA'
      - '--region=${_REGION}'
      - '--platform=managed'
      - '--allow-unauthenticated'

  # Install dependencies and build for Cloud Function
  - name: 'gcr.io/cloud-builders/npm'
    args: ['install']
  - name: 'gcr.io/cloud-builders/npm'
    args: ['run', 'build']

  # Deploy Cloud Function
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'functions'
      - 'deploy'
      - '${_SERVICE_NAME}'
      - '--gen2'
      - '--runtime=${_RUNTIME}'
      - '--trigger-http'
      - '--allow-unauthenticated'
      - '--region=${_REGION}'
      - '--entry-point=${_ENTRY_POINT}'
      - '--memory=128Mi'

 # Uncomment when ready to use api gateway and load balancers
  # # Deploy API Gateway
  # - name: 'bash'
  #   entrypoint: 'bash'
  #   args:
  #     - '-c'
  #     - |
  #       sed -i "s|FUNCTION_URL|https://${_REGION}-$PROJECT_ID.cloudfunctions.net/${_SERVICE_NAME}|g" ./api-spec.yaml

  # - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  #   entrypoint: gcloud
  #   args:
  #     - 'api-gateway'
  #     - 'api-configs'
  #     - 'create'
  #     - '${_SERVICE_NAME}-config'
  #     - '--api=${_SERVICE_NAME}-api'
  #     - '--openapi-spec=./api-spec.yaml'
  #     - '--project=$PROJECT_ID'

  # - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  #   entrypoint: 'bash'
  #   args:
  #     - '-c'
  #     - |
  #       if gcloud api-gateway gateways describe ${_SERVICE_NAME} --location=${_REGION} --project=${PROJECT_ID} > /dev/null 2>&1; then
  #         echo "Gateway exists. Updating..."
  #         gcloud api-gateway gateways update ${_SERVICE_NAME} \
  #           --api=${_SERVICE_NAME}-api \
  #           --api-config=${_SERVICE_NAME}-config \
  #           --location=${_REGION} \
  #           --project=${PROJECT_ID}
  #       else
  #         echo "Gateway does not exist. Creating..."
  #         gcloud api-gateway gateways create ${_SERVICE_NAME} \
  #           --api=${_SERVICE_NAME}-api \
  #           --api-config=${_SERVICE_NAME}-config \
  #           --location=${_REGION} \
  #           --project=${PROJECT_ID}
  #       fi

  # # # Update Load Balancer backend
  # - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  #   entrypoint: gcloud
  #   args:
  #     - 'compute'
  #     - 'backend-services'
  #     - 'create'
  #     - 'my-backend-service'
  #     - '--global'
  #     - '--protocol=HTTP2'
  #     - '--health-checks=my-health-check'
  #     - '--timeout=3600s'
  #     - '--port-name=api'
  #     - '--protocol=HTTP'

images:
  - 'gcr.io/$PROJECT_ID/tappz:$COMMIT_SHA'
